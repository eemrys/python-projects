from sklearn import preprocessing
import pandas as pd
import numpy as np
from datetime import datetime

import sqlalchemy
from sqlalchemy.orm import sessionmaker, mapper
from sqlalchemy import (
    Table,
    Column,
    MetaData,
    Float,
    DateTime,
)

def preprocessingData(df):
    le = preprocessing.LabelEncoder()
    columns = df.columns
    df.loc[:,:].replace([np.inf, -np.inf], np.nan, inplace=True)
    df.loc[:,:].fillna(0, inplace=True)
    for col in columns:
        if isinstance(df[col], object):
            df.loc[:,col] = le.fit_transform(df.loc[:,col].astype(str)) 
        if not np.all(np.isfinite(df[col])): #проверка
            print(col, 'inf')
        elif np.any(np.isnan(df[col])):
            print(col, 'nan')
    return None


class PredictionLog:
    def __init__(self, score, true_label, date):
        self.score = score
        self.true_label = true_label
        self.date = date

    def __repr__(self):#возвращает вид объекта класса
        return "<PredictionLog('{}', '{}', '{}')>".format(
            self.score,
            self.true_label,
            self.date,
        )
    
class Database:
    def __init__(self, db_path):
        #подключается к db c встроенного модуля sqlite3
        self.engine = sqlalchemy.create_engine(f'sqlite:///{db_path}')
        metadata = MetaData()
        table = Table(
            'prediction_log',
            metadata,
            Column('score', Float),
            Column('true_label', Float),
            Column('date', DateTime, primary_key=True),
        )
        #настройка отображения: сопоставление таблицы и объекта класса PredictionLog, название полей поэтому должны быть одинаковыми
        mapper(PredictionLog, table)
        metadata.create_all(self.engine) #создает все таблицы
        self.session = sessionmaker(bind=self.engine)() #привязываем созданное подключение к сессии
    
    def insert(self, score, true_label):
        #создается и инициализируется новый объект класса с помощью информации полученной из скрипта (ну кроме даты)
        pred_log = PredictionLog(
            score=score,
            true_label=true_label,
            date=datetime.now(),
        )
        self.session.add(pred_log) #добавляем объект к сессии
        self.session.commit() 
        
    def drop_table(self):
        self.session.query(PredictionLog).delete() #удаляет все результаты соответсвующие этому классу из сессии
        self.session.commit()

    def close(self):
        self.session.close() #конец сессии